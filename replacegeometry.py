# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReplaceGeometry
                                 A QGIS plugin
  Replaces a geometry keeping the attributes unchanged
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by ValP
        email                : pinnavalerio@yahoo.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsApplication, QgsMapLayer, QgsMessageLog
from qgis.PyQt.QtWidgets import QAction, QMenu, QToolButton  # Qt5
from PyQt5.QtWidgets import QMessageBox
from qgis.core import (QgsWkbTypes,
                       QgsProject,
                       QgsVectorLayerTools,
                       QgsVectorFileWriter,
                       QgsGeometry,
                       QgsPoint,
                       QgsPointXY,
                       QgsFeatureRequest,
                       QgsVectorLayer,
                       QgsDistanceArea,
                       QgsUnitTypes)
from .resources import *
#from .resources3 import *
from qgis.utils import iface


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .replacegeometry_dialog import ReplaceGeometryDialog



class ReplaceGeometry:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = iface.mapCanvas()

        
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ReplaceGeometry_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Replace Geometry')
        self.popupMenu = QMenu()
        self.toolButton = QToolButton()
        self.toolButtonAction = None
        
        # Setup map tools
        self.tool = None
        
        ###not sure if this it si a good idea. check
        #self.iface.currentLayerChanged["QgsMapLayer*"].connect(self.toggle)
        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ReplaceGeometry', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        insert_before=0,
        checkable=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)
            
        if checkable:
            action.setCheckable(True)
        
        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/replacegeometry/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Replace Geometry'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Replace Geometry'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Get the active layer
        layer = iface.activeLayer()

        # Save the edits to avoid losing the unsaved editing   
        layer.commitChanges()

        # Check the attribute popup status
        popup_status = QSettings().value("/Qgis/digitizing/disable_enter_attribute_values_dialog")

        # Turn off the attribute form popup
        if popup_status == False:
            QSettings().setValue("/Qgis/digitizing/disable_enter_attribute_values_dialog", True)
        
        for feature in layer.selectedFeatures():
            old_id = [feature.id()]
                 
        # Check, with messages, that only one feature is selected
        if layer.selectedFeatureCount() > 0:
            count = layer.selectedFeatureCount()
        else:
            count = 0
         
        if count == 0 :
            QMessageBox.warning(
            None,
            'Replace Geometry Plugin',
            'There is no selection. Select one feature.')
        elif count >1: 
             QMessageBox.warning(None,
           'Replace Geometry Plugin',
            'The selection contains multiple features. Select only one feature.')
        else:

        #start the digitising
        # Define a function called when a feature is added to the layer
            def feature_added():
              
                # Disconnect from the signal
                layer.featureAdded.disconnect()

                listOfIds = [feat.id() for feat in layer.getFeatures()]
                new_feature_id = [listOfIds[0]]
                
                # Calculate the new WKT
                layer.selectByIds(new_feature_id)
                for feature in layer.selectedFeatures():
                    new_WKT = feature.geometry().asWkt()
                    layer.removeSelection()
                 
                layer.startEditing()
                layer.selectByIds(old_id)
                for feature in layer.selectedFeatures():
                    final_id = feature.id()
                    new_geometry = QgsGeometry.fromWkt(new_WKT)
                    layer.changeGeometry(final_id, new_geometry)
                
                # Remove the new feature
                layer.removeSelection()
                layer.selectByIds(new_feature_id)
                for feature in layer.selectedFeatures():
                    toremove_id = feature.id()
                    layer.deleteFeature(toremove_id)

                # Save the changes
                layer.commitChanges()
                
                # Reselect the old feature
                layer.selectByIds(old_id)
                
                # Turn on the popup if ever was on
                QSettings().setValue("/Qgis/digitizing/disable_enter_attribute_values_dialog", popup_status)
                
            
            # Connect the layer to the signal featureAdded, so when a feature is
            # added to the layer, the feature_added function is called
        layer.featureAdded.connect(feature_added)

        # Set the layer in edit mode
        layer.startEditing()
            
        #Activate the QGIS add feature tool
        iface.actionAddFeature().trigger()
            
    
